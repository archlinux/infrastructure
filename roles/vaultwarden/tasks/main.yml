- name: Create ssl cert
  include_role:
    name: certificate
  vars:
    domains: ["{{ vaultwarden_domain }}"]

- name: Install vaultwarden
  pacman: name=vaultwarden,vaultwarden-web state=present

- name: Make nginx log dir
  file: path=/var/log/nginx/{{ vaultwarden_domain }} state=directory owner=root group=root mode=755

- name: Set up nginx
  template: src=nginx.d.conf.j2 dest=/etc/nginx/nginx.d/vaultwarden.conf owner=root group=http mode=640
  notify: Reload nginx

- name: Install vaultwarden configuration
  template: src=vaultwarden.env.j2 dest=/etc/vaultwarden.env owner=root group=root mode=640
  notify: Restart vaultwarden

- name: Start and enable vaultwarden
  service: name=vaultwarden.service enabled=yes state=started

- name: Retrive bearer access token
  uri:
    url: https://{{ vaultwarden_domain }}/identity/connect/token
    method: POST
    body_format: form-urlencoded
    body:
      deviceIdentifier: ""
      deviceName: ""
      deviceType: ""
      client_id: "{{ vault_vaultwarden_api_client_id }}"
      client_secret: "{{ vault_vaultwarden_api_client_secret }}"
      scope: "{{ vault_vaultwarden_api_scope }}"
      grant_type: "{{ vault_vaultwarden_api_grant_type }}"
  register: access_token

- name: Update policies
  uri:
    url: https://{{ vaultwarden_domain }}/api/organizations/{{ vault_vaultwarden_organization_id }}/policies/{{ item.id }}
    headers:
      Authorization: "Bearer {{ access_token.json.access_token }}"
    method: PUT
    body_format: json
    body: "{{ {'data': none, 'enabled': item.enabled, 'type': item.id} | to_json }}"
  loop: "{{ vaultwarden_policies }}"
  loop_control:
    label: "{{ item.id }}"
